from tensorflow import keras
import numpy as np
import pandas as pd
from keras.callbacks import CSVLogger
  
df=pd.read_csv('ourdata6.csv')

train = df.sample(frac=0.8, random_state=0)
test = df.drop(train.index)
 
x_train=train.iloc[:,0:5]
x_test=test.iloc[:,0:5]

y_train=train.iloc[:,6]
y_test=test.iloc[:,6]
y_test=np.asmatrix(y_test)

     
def build_nn():
      model = keras.Sequential()
      model.add(keras.layers.Dense(64, input_shape=(len(x_train.columns),)))
      model.add(keras.layers.Dense(16, activation="relu"))
      model.add(keras.layers.Dense(8, activation="relu"))
      #model2.add(keras.layers.Dense(2, activation="relu"))
      model.add(keras.layers.Dense(1, activation="relu"))
      print(model.summary())
     
      optimizer = keras.optimizers.Adam(learning_rate=0.0001)
      model.compile(optimizer=optimizer, loss='mse')
      
      csv_logger = CSVLogger('log2.csv', append=True, separator=';')
     
      model.fit(x_train, y_train, batch_size=5, epochs=100, validation_split=0.2, callbacks=[csv_logger])

      model.save('predict_diam_model')
     
      return model
 
def predict():
    data=np.asmatrix(x_test)
        
    model = keras.models.load_model('predict_diam_model')

    diam=model.predict_on_batch(data)

    return data, diam

model=build_nn()
[data, diam]=predict()
np.savetxt("ytestNN.csv", y_test, delimiter=";")
np.savetxt("ypredNN.csv", diam, delimiter=";")
